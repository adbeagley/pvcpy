"""Script to generate VALUEREP module"""
import inspect
from types import DynamicClassAttribute
from pathlib import Path

from pydicom.valuerep import VR
from pydicom.tag import TagType
from pydicom.datadict import (
    DicomDictionary,
    dictionary_keyword,
    get_entry
)

_PKG_DIRECTORY = Path(__file__).parents[1]
VALUEREP_FILE_NAME = _PKG_DIRECTORY.joinpath("utilities", "valuerep.py")


def dictionary_vr(tag: TagType) -> str:
    """Return the value representation of the element corresponding to `tag`.
    Only performs the lookup for official DICOM elements.
    Parameters
    ----------
    tag : int or str or Tuple[int, int]
        The tag for the element whose keyword is being retrieved, in any of
        the forms accepted by :func:`~pydicom.tag.Tag`.
    Returns
    -------
    str
        The value respresentation of the corresponding element.
    Raises
    ------
    KeyError
        If the tag is not present in the DICOM data dictionary.
    """
    return get_entry(tag)[0]


def run():
    """Writes module file"""
    with open(VALUEREP_FILE_NAME, "w") as f:
        f.write(
            '"""DICOM Data Element\'s Value Representation (VR)\n'
            'From Table 6.2.1 in DICOM PS3.5 2022c - Data Structures'
            f'and Encoding\nauto-generated by {Path(__file__).name}"""\n'
        )
        f.write("# flake8: noqa\n")
        f.write("# pylint: disable-all\n\n")

        # write value reps
        attributes = inspect.getmembers(VR,
                                        lambda a: not (inspect.isroutine(a)))
        attributes = [a for a in attributes
                      if not (a[0].startswith('__') or
                              a[0].endswith('__') or
                              isinstance(a[1], DynamicClassAttribute))]
        for attr in attributes:
            f.write(f'{attr[0]} = "{attr[-1]}"\n')

        # write vr_dict
        f.write("\nvr_dict = dict(\n")
        f.write("\t{\n")
        for tag in DicomDictionary:
            f.write(
                f'\t\t"{dictionary_keyword(tag)}": "{dictionary_vr(tag)}", \n'
            )
        f.write("\t}\n")
        f.write(")\n")


if __name__ == "__main__":
    run()
